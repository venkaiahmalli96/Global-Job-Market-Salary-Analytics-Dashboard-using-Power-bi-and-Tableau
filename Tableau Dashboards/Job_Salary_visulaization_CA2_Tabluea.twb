<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20242.24.0807.0327                               -->
<workbook original-version='18.1' source-build='2024.2.2 (20242.24.0807.0327)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='updated_Jobs_Dataset' inline='true' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='updated_Jobs_Dataset' name='textscan.1t4n3ty1xm4iwc13irmbg0cklhq5'>
            <connection class='textscan' directory='C:/Users/HP/Desktop/Job_Salary_visulaization_CA2_Tabluea.twb Files/Data/Downloads' filename='updated_Jobs_Dataset.csv' password='' server='' />
          </named-connection>
          <named-connection caption='Jobs_dataset_CA2' name='textscan.1sd9fa40sod0i1187n23n0hpaxr1'>
            <connection class='textscan' directory='C:/Users/HP/Desktop/Job_Salary_visulaization_CA2_Tabluea.twb Files/Data/Desktop/Data storage solutions CA2' filename='Jobs_dataset_CA2.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.1sd9fa40sod0i1187n23n0hpaxr1' name='Jobs_dataset_CA2.csv' table='[Jobs_dataset_CA2#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='real' name='Job Id' ordinal='0' />
            <column datatype='string' name='Experience' ordinal='1' />
            <column datatype='string' name='Qualifications' ordinal='2' />
            <column datatype='string' name='Salary Range' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='string' name='Country' ordinal='5' />
            <column datatype='real' name='latitude' ordinal='6' />
            <column datatype='real' name='longitude' ordinal='7' />
            <column datatype='string' name='Work Type' ordinal='8' />
            <column datatype='integer' name='Company Size' ordinal='9' />
            <column datatype='date' name='Job Posting Date' ordinal='10' />
            <column datatype='string' name='Preference' ordinal='11' />
            <column datatype='string' name='Job Title' ordinal='12' />
            <column datatype='string' name='Role' ordinal='13' />
            <column datatype='string' name='Job Portal' ordinal='14' />
            <column datatype='string' name='skills' ordinal='15' />
            <column datatype='string' name='Company' ordinal='16' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.1sd9fa40sod0i1187n23n0hpaxr1' name='Jobs_dataset_CA2.csv' table='[Jobs_dataset_CA2#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='real' name='Job Id' ordinal='0' />
            <column datatype='string' name='Experience' ordinal='1' />
            <column datatype='string' name='Qualifications' ordinal='2' />
            <column datatype='string' name='Salary Range' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='string' name='Country' ordinal='5' />
            <column datatype='real' name='latitude' ordinal='6' />
            <column datatype='real' name='longitude' ordinal='7' />
            <column datatype='string' name='Work Type' ordinal='8' />
            <column datatype='integer' name='Company Size' ordinal='9' />
            <column datatype='date' name='Job Posting Date' ordinal='10' />
            <column datatype='string' name='Preference' ordinal='11' />
            <column datatype='string' name='Job Title' ordinal='12' />
            <column datatype='string' name='Role' ordinal='13' />
            <column datatype='string' name='Job Portal' ordinal='14' />
            <column datatype='string' name='skills' ordinal='15' />
            <column datatype='string' name='Company' ordinal='16' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;â‚¹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Job Id</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Job Id]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Job Id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Experience</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Experience]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Experience</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qualifications</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Qualifications]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Qualifications</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Salary Range</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Salary Range]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Salary Range</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Work Type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Work Type]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Work Type</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Company Size</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Company Size]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Company Size</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Job Posting Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Job Posting Date]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Job Posting Date</remote-alias>
            <ordinal>10</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Preference</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Preference]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Preference</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Job Title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Job Title]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Job Title</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Role</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Role]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Role</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Job Portal</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Job Portal]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Job Portal</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>skills</remote-name>
            <remote-type>129</remote-type>
            <local-name>[skills]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>skills</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Company</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Company]</local-name>
            <parent-name>[Jobs_dataset_CA2.csv]</parent-name>
            <remote-alias>Company</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Min Salary' datatype='integer' name='[Calculation_831758578957787144]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='INT(LEFT([Salary Range], FIND([Salary Range], &quot;-&quot;) - 1))' />
      </column>
      <column caption='Max salary' datatype='integer' name='[Calculation_831758578957983753]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='INT(MID([Salary Range], FIND([Salary Range], &quot;-&quot;) + 1, LEN([Salary Range])))' />
      </column>
      <column caption='Average Salary' datatype='real' name='[Calculation_831758578958069770]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([Calculation_831758578957787144] + [Calculation_831758578957983753]) / 2' />
      </column>
      <column caption='Percentage of Work type' datatype='real' name='[Calculation_831758579088277515]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Job Id]) / SUM({FIXED : SUM([Job Id])}) * 100' />
      </column>
      <column caption='Min Experience ' datatype='integer' name='[Calculation_831758579119820815]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='INT(LEFT([Experience], FIND([Experience], &quot; &quot;) - 1))' />
      </column>
      <column caption='Experience Level' datatype='string' name='[Calculation_831758579120005136]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_831758579119820815] &lt;= 3 THEN &quot;Entry Level&quot;&#13;&#10;ELSEIF [Calculation_831758579119820815] &lt;= 7 THEN &quot;Mid Level&quot;&#13;&#10;ELSE &quot;Senior Level&quot;&#13;&#10;END' />
      </column>
      <column caption='Percentage of preference ' datatype='real' name='[Calculation_831758579156856850]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Job Id]) / SUM({FIXED: COUNT([Job Id])}) * 100' />
      </column>
      <column caption='Country1' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Experience1' datatype='string' name='[Experience]' role='dimension' type='nominal' />
      <column datatype='real' name='[Job Id]' role='dimension' type='ordinal' />
      <column caption='Job Portal1' datatype='string' name='[Job Portal]' role='dimension' type='nominal' />
      <column caption='Job Title1' datatype='string' name='[Job Title]' role='dimension' type='nominal' />
      <column caption='Percentage of preference_1' datatype='real' name='[Percentage of preference  (copy)_831758579157790739]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Job Id]) / SUM({FIXED : COUNT([Job Id])}) * 100' />
      </column>
      <column caption='Work Type1' datatype='string' name='[Work Type]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='Jobs_dataset_CA2.csv' datatype='table' name='[__tableau_internal_object_id__].[Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Skills' datatype='string' name='[skills]' role='dimension' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Work Type]' derivation='None' name='[none:Work Type:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Work Type:nk]' type='palette'>
            <map to='#76b7b2'>
              <bucket>&quot;Part-Time&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Intern&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Full-Time&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Temporary&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Contract&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Democratic Republic Of Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Macao SAR, China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Republic Of Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Venezuela, RB&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahamas, The&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;UAE&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lao PDR&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;West Bank and Gaza&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iran, Islamic Rep.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;St. Martin (French part)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Micronesia, Fed. Sts.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Jobs_dataset_CA2.csv' id='Jobs_dataset_CA2.csv_4732F937072443ED909C1106E3EC66D5'>
            <properties context=''>
              <relation connection='textscan.1sd9fa40sod0i1187n23n0hpaxr1' name='Jobs_dataset_CA2.csv' table='[Jobs_dataset_CA2#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='real' name='Job Id' ordinal='0' />
                  <column datatype='string' name='Experience' ordinal='1' />
                  <column datatype='string' name='Qualifications' ordinal='2' />
                  <column datatype='string' name='Salary Range' ordinal='3' />
                  <column datatype='string' name='location' ordinal='4' />
                  <column datatype='string' name='Country' ordinal='5' />
                  <column datatype='real' name='latitude' ordinal='6' />
                  <column datatype='real' name='longitude' ordinal='7' />
                  <column datatype='string' name='Work Type' ordinal='8' />
                  <column datatype='integer' name='Company Size' ordinal='9' />
                  <column datatype='date' name='Job Posting Date' ordinal='10' />
                  <column datatype='string' name='Preference' ordinal='11' />
                  <column datatype='string' name='Job Title' ordinal='12' />
                  <column datatype='string' name='Role' ordinal='13' />
                  <column datatype='string' name='Job Portal' ordinal='14' />
                  <column datatype='string' name='skills' ordinal='15' />
                  <column datatype='string' name='Company' ordinal='16' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Average_salary_country_COD'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#d3b348' fontname='Tableau Bold' fontsize='12'>Average Salary  Per County</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='updated_Jobs_Dataset' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.13cqenj0pe69qg1gavu9k0dal6a8'>
            <column caption='Min Salary' datatype='integer' name='[Calculation_831758578957787144]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(LEFT([Salary Range], FIND([Salary Range], &quot;-&quot;) - 1))' />
            </column>
            <column caption='Max salary' datatype='integer' name='[Calculation_831758578957983753]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(MID([Salary Range], FIND([Salary Range], &quot;-&quot;) + 1, LEN([Salary Range])))' />
            </column>
            <column caption='Average Salary' datatype='real' name='[Calculation_831758578958069770]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_831758578957787144] + [Calculation_831758578957983753]) / 2' />
            </column>
            <column caption='Country1' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Experience1' datatype='string' name='[Experience]' role='dimension' type='nominal' />
            <column datatype='string' name='[Salary Range]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_831758578958069770]' derivation='Avg' name='[avg:Calculation_831758578958069770:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Experience]' derivation='None' name='[none:Experience:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;American Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antigua and Barbuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahamas, The&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;British Virgin Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cayman Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Democratic Republic Of Congo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Faroe Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gibraltar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greenland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Grenada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kyrgyz Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lao PDR&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Marshall Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Micronesia, Fed. Sts.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Moldova&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;North Korea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Northern Mariana Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Republic Of Congo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovak Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Lucia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Martin (French part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Suriname&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkmenistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tuvalu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;UAE&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;UK&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uruguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;USA&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uzbekistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela, RB&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;West Bank and Gaza&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Experience:nk]'>
            <groupfilter function='member' level='[none:Experience:nk]' member='&quot;0 to 9 Years&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</column>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Experience:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[Longitude (generated)]' field-type='quantitative' max='16209110.227273304' min='-7964944.3318271916' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[Latitude (generated)]' field-type='quantitative' max='6891037.035533336' min='-6820509.8867505454' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[avg:Calculation_831758578958069770:qk]' value='c&quot;â‚¬&quot;#,##0&quot;K&quot;' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]' />
              <text column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[avg:Calculation_831758578958069770:qk]' />
              <lod column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[Latitude (generated)]</rows>
        <cols>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{AA69D3F5-9DE0-4B0C-8E02-726289F40B74}' />
    </worksheet>
    <worksheet name='Job Roles average_salary_filter_COD'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#f1ce63' fontname='Tableau Bold' fontsize='12'>Job Roles average salary by Expirience level</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='updated_Jobs_Dataset' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' />
          </datasources>
          <datasource-dependencies datasource='federated.13cqenj0pe69qg1gavu9k0dal6a8'>
            <column caption='Min Salary' datatype='integer' name='[Calculation_831758578957787144]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(LEFT([Salary Range], FIND([Salary Range], &quot;-&quot;) - 1))' />
            </column>
            <column caption='Max salary' datatype='integer' name='[Calculation_831758578957983753]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(MID([Salary Range], FIND([Salary Range], &quot;-&quot;) + 1, LEN([Salary Range])))' />
            </column>
            <column caption='Average Salary' datatype='real' name='[Calculation_831758578958069770]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_831758578957787144] + [Calculation_831758578957983753]) / 2' />
            </column>
            <column caption='Min Experience ' datatype='integer' name='[Calculation_831758579119820815]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(LEFT([Experience], FIND([Experience], &quot; &quot;) - 1))' />
            </column>
            <column caption='Experience Level' datatype='string' name='[Calculation_831758579120005136]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_831758579119820815] &lt;= 3 THEN &quot;Entry Level&quot;&#13;&#10;ELSEIF [Calculation_831758579119820815] &lt;= 7 THEN &quot;Mid Level&quot;&#13;&#10;ELSE &quot;Senior Level&quot;&#13;&#10;END' />
            </column>
            <column caption='Experience1' datatype='string' name='[Experience]' role='dimension' type='nominal' />
            <column caption='Job Title1' datatype='string' name='[Job Title]' role='dimension' type='nominal' />
            <column datatype='string' name='[Salary Range]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_831758578958069770]' derivation='Avg' name='[avg:Calculation_831758578958069770:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_831758579120005136]' derivation='None' name='[none:Calculation_831758579120005136:nk]' pivot='key' type='nominal' />
            <column-instance column='[Job Title]' derivation='None' name='[none:Job Title:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]'>
            <groupfilter function='level-members' level='[none:Calculation_831758579120005136:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Title:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Calculation_831758578958069770])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Job Title:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Title:nk]' direction='DESC' using='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[avg:Calculation_831758578958069770:qk]' />
          <slices>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Title:nk]</column>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[avg:Calculation_831758578958069770:qk]' value='c&quot;â‚¬&quot;#,##0&quot;K&quot;' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.8785635232925415' />
                <format attr='mark-color' value='#8cd17d' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[avg:Calculation_831758578958069770:qk]</rows>
        <cols>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Title:nk]</cols>
      </table>
      <simple-id uuid='{2256B60D-628E-4F53-99ED-A976880CE893}' />
    </worksheet>
    <worksheet name='Line _trends_filter'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#d3b348' fontname='Tableau Bold' fontsize='12'>Monthly Trends of Jobs Openings</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='updated_Jobs_Dataset' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' />
          </datasources>
          <datasource-dependencies datasource='federated.13cqenj0pe69qg1gavu9k0dal6a8'>
            <column caption='Country1' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Job Id]' role='dimension' type='ordinal' />
            <column datatype='date' name='[Job Posting Date]' role='dimension' type='ordinal' />
            <column-instance column='[Job Id]' derivation='Count' name='[cnt:Job Id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Job Posting Date]' derivation='Month' name='[mn:Job Posting Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Job Posting Date]' derivation='Year' name='[yr:Job Posting Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]'>
            <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[yr:Job Posting Date:ok]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:Job Posting Date:ok]' member='2022' />
              <groupfilter function='member' level='[yr:Job Posting Date:ok]' member='2023' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[yr:Job Posting Date:ok]</column>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[cnt:Job Id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#f1ce63' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[cnt:Job Id:qk]</rows>
        <cols>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[mn:Job Posting Date:ok]</cols>
      </table>
      <simple-id uuid='{2A4E2DE3-9F02-444B-BEAE-ABF5CC085DAA}' />
    </worksheet>
    <worksheet name='Salary_share_COD'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#d3b348' fontname='Tableau Bold' fontsize='12'>Average salary shares among work types</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='updated_Jobs_Dataset' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' />
          </datasources>
          <datasource-dependencies datasource='federated.13cqenj0pe69qg1gavu9k0dal6a8'>
            <column caption='Min Salary' datatype='integer' name='[Calculation_831758578957787144]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(LEFT([Salary Range], FIND([Salary Range], &quot;-&quot;) - 1))' />
            </column>
            <column caption='Max salary' datatype='integer' name='[Calculation_831758578957983753]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(MID([Salary Range], FIND([Salary Range], &quot;-&quot;) + 1, LEN([Salary Range])))' />
            </column>
            <column caption='Average Salary' datatype='real' name='[Calculation_831758578958069770]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([Calculation_831758578957787144] + [Calculation_831758578957983753]) / 2' />
            </column>
            <column caption='Min Experience ' datatype='integer' name='[Calculation_831758579119820815]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(LEFT([Experience], FIND([Experience], &quot; &quot;) - 1))' />
            </column>
            <column caption='Experience Level' datatype='string' name='[Calculation_831758579120005136]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_831758579119820815] &lt;= 3 THEN &quot;Entry Level&quot;&#13;&#10;ELSEIF [Calculation_831758579119820815] &lt;= 7 THEN &quot;Mid Level&quot;&#13;&#10;ELSE &quot;Senior Level&quot;&#13;&#10;END' />
            </column>
            <column caption='Experience1' datatype='string' name='[Experience]' role='dimension' type='nominal' />
            <column datatype='string' name='[Salary Range]' role='dimension' type='nominal' />
            <column caption='Work Type1' datatype='string' name='[Work Type]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_831758579120005136]' derivation='None' name='[none:Calculation_831758579120005136:nk]' pivot='key' type='nominal' />
            <column-instance column='[Work Type]' derivation='None' name='[none:Work Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_831758578958069770]' derivation='Sum' name='[pcto:sum:Calculation_831758578958069770:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Calculation_831758578958069770]' derivation='Sum' name='[sum:Calculation_831758578958069770:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_831758579120005136:nk]' member='&quot;Entry Level&quot;' />
              <groupfilter function='member' level='[none:Calculation_831758579120005136:nk]' member='&quot;Mid Level&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[pcto:sum:Calculation_831758578958069770:qk]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Work Type:nk]' />
              <size column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[sum:Calculation_831758578958069770:qk]' />
              <wedge-size column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[pcto:sum:Calculation_831758578958069770:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Work Type:&#9;</run>
                <run bold='true'><![CDATA[<[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Work Type:nk]>]]></run>
                <run>Ã†&#10;</run>
                <run fontcolor='#787878'>% of Total Average Salary along Table (Across):	</run>
                <run bold='true'><![CDATA[<[federated.13cqenj0pe69qg1gavu9k0dal6a8].[pcto:sum:Calculation_831758578958069770:qk]>]]></run>
                <run>Ã†&#10;&#10;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{72DAA5BC-6761-4230-A72A-269486520D98}' />
    </worksheet>
    <worksheet name='Top 10 countries_filter'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#d3b348' fontname='Tableau Bold' fontsize='12'>Top 10 Counties by Number Of Job Postings</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='updated_Jobs_Dataset' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' />
          </datasources>
          <datasource-dependencies datasource='federated.13cqenj0pe69qg1gavu9k0dal6a8'>
            <column caption='Max salary' datatype='integer' name='[Calculation_831758578957983753]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='INT(MID([Salary Range], FIND([Salary Range], &quot;-&quot;) + 1, LEN([Salary Range])))' />
            </column>
            <column caption='Country1' datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Job Id]' role='dimension' type='ordinal' />
            <column caption='Job Portal1' datatype='string' name='[Job Portal]' role='dimension' type='nominal' />
            <column datatype='string' name='[Salary Range]' role='dimension' type='nominal' />
            <column-instance column='[Job Id]' derivation='Count' name='[cnt:Job Id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Job Portal]' derivation='None' name='[none:Job Portal:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Calculation_831758578957983753])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]' direction='DESC' using='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[cnt:Job Id:qk]' />
          <filter class='categorical' column='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Portal:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;CareerBuilder&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;Dice&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;FlexJobs&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;Idealist&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;Jobs2Careers&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;Monster&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;SimplyHired&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;Snagajob&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;Stack Overflow Jobs&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;The Muse&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;USAJOBS&quot;' />
              <groupfilter function='member' level='[none:Job Portal:nk]' member='&quot;ZipRecruiter&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</column>
            <column>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Portal:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[cnt:Job Id:qk]' scope='cols' value='No Of Job Posting' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#a0cbe8' />
                <format attr='size' value='1.6481767892837524' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</rows>
        <cols>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[cnt:Job Id:qk]</cols>
      </table>
      <simple-id uuid='{96CFF6AC-2D2F-4A97-BB36-DD1FA79B1C79}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard_Job_openings_sal'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='updated_Jobs_Dataset' name='federated.13cqenj0pe69qg1gavu9k0dal6a8' />
      </datasources>
      <datasource-dependencies datasource='federated.13cqenj0pe69qg1gavu9k0dal6a8'>
        <column caption='Experience Level' datatype='string' name='[Calculation_831758579120005136]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_831758579119820815] &lt;= 3 THEN &quot;Entry Level&quot;&#13;&#10;ELSEIF [Calculation_831758579119820815] &lt;= 7 THEN &quot;Mid Level&quot;&#13;&#10;ELSE &quot;Senior Level&quot;&#13;&#10;END' />
        </column>
        <column datatype='date' name='[Job Posting Date]' role='dimension' type='ordinal' />
        <column-instance column='[Calculation_831758579120005136]' derivation='None' name='[none:Calculation_831758579120005136:nk]' pivot='key' type='nominal' />
        <column-instance column='[Job Posting Date]' derivation='Year' name='[yr:Job Posting Date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='35375' id='3' name='Job Roles average_salary_filter_COD' w='33300' x='100' y='125' />
        <zone h='10125' id='4' name='Job Roles average_salary_filter_COD' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]' type-v2='filter' w='16000' x='83400' y='625' />
        <zone h='35375' id='5' name='Top 10 countries_filter' w='33300' x='34400' y='1375' />
        <zone h='32250' id='6' name='Salary_share_COD' w='29000' x='600' y='38250' />
        <zone h='31750' id='9' name='Line _trends_filter' w='33300' x='29900' y='39250' />
        <zone h='10125' id='11' name='Line _trends_filter' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[yr:Job Posting Date:ok]' type-v2='filter' w='16000' x='67800' y='3375' />
        <zone h='57375' id='12' name='Average_salary_country_COD' w='33300' x='66100' y='15125' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1550' minheight='1550' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='24' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='23' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='10125' id='4' mode='checkdropdown' name='Job Roles average_salary_filter_COD' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]' type-v2='filter' w='16000' x='83400' y='625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='35375' id='3' is-fixed='true' name='Job Roles average_salary_filter_COD' w='33300' x='100' y='125'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='35375' id='5' is-fixed='true' name='Top 10 countries_filter' w='33300' x='34400' y='1375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='57375' id='12' is-fixed='true' name='Average_salary_country_COD' w='33300' x='66100' y='15125'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='258' h='32250' id='6' is-fixed='true' name='Salary_share_COD' w='29000' x='600' y='38250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='10125' id='11' mode='checkdropdown' name='Line _trends_filter' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[yr:Job Posting Date:ok]' type-v2='filter' w='16000' x='67800' y='3375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='254' h='31750' id='9' is-fixed='true' name='Line _trends_filter' w='33300' x='29900' y='39250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{38FAFDDB-4D2B-4247-B579-F11A329EA85B}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Job Roles average_salary_filter_COD'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='marks' />
          </strip>
          <strip size='100'>
            <card type='filters' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Experience:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Title:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7CBEFE4C-0794-43D5-883C-8BBA6C683B56}' />
    </window>
    <window class='worksheet' name='Top 10 countries_filter'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Portal:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Company:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Id:ok]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Portal:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E0A59375-A9E5-4521-8768-2CC94729311C}' />
    </window>
    <window class='worksheet' name='Salary_share_COD'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Work Type:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[sum:Calculation_831758578958069770:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Calculation_831758579120005136:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Work Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{046A3E13-3B12-41F8-B78C-FE109C973A00}' />
    </window>
    <window class='worksheet' name='Line _trends_filter'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]' type='filter' />
            <card param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[yr:Job Posting Date:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Job Id:ok]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[yr:Job Posting Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DF08996C-FC14-4053-84FC-F2E15FE9AD84}' />
    </window>
    <window class='worksheet' name='Average_salary_country_COD'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Experience:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Country:nk]</field>
            <field>[federated.13cqenj0pe69qg1gavu9k0dal6a8].[none:Experience:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{384E92C5-DEFC-4EEB-9015-DDA7B9965A6F}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard_Job_openings_sal'>
      <viewpoints>
        <viewpoint name='Average_salary_country_COD'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Job Roles average_salary_filter_COD'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Line _trends_filter'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Salary_share_COD'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Top 10 countries_filter'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{1B6BC356-226F-4EEF-A5C3-75C36A795D76}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Average_salary_country_COD' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard_Job_openings_sal' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Job Roles average_salary_filter_COD' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Line _trends_filter' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Salary_share_COD' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top 10 countries_filter' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
